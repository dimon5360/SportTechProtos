// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: proto/auth_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthUsersService_CreateUser_FullMethodName = "/proto.AuthUsersService/CreateUser"
	AuthUsersService_AuthUser_FullMethodName   = "/proto.AuthUsersService/AuthUser"
	AuthUsersService_GetUser_FullMethodName    = "/proto.AuthUsersService/GetUser"
)

// AuthUsersServiceClient is the client API for AuthUsersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthUsersServiceClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequst, opts ...grpc.CallOption) (*UserInfoResponse, error)
	AuthUser(ctx context.Context, in *AuthUserRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
}

type authUsersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthUsersServiceClient(cc grpc.ClientConnInterface) AuthUsersServiceClient {
	return &authUsersServiceClient{cc}
}

func (c *authUsersServiceClient) CreateUser(ctx context.Context, in *CreateUserRequst, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	out := new(UserInfoResponse)
	err := c.cc.Invoke(ctx, AuthUsersService_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authUsersServiceClient) AuthUser(ctx context.Context, in *AuthUserRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	out := new(UserInfoResponse)
	err := c.cc.Invoke(ctx, AuthUsersService_AuthUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authUsersServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	out := new(UserInfoResponse)
	err := c.cc.Invoke(ctx, AuthUsersService_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthUsersServiceServer is the server API for AuthUsersService service.
// All implementations must embed UnimplementedAuthUsersServiceServer
// for forward compatibility
type AuthUsersServiceServer interface {
	CreateUser(context.Context, *CreateUserRequst) (*UserInfoResponse, error)
	AuthUser(context.Context, *AuthUserRequest) (*UserInfoResponse, error)
	GetUser(context.Context, *GetUserRequest) (*UserInfoResponse, error)
	mustEmbedUnimplementedAuthUsersServiceServer()
}

// UnimplementedAuthUsersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthUsersServiceServer struct {
}

func (UnimplementedAuthUsersServiceServer) CreateUser(context.Context, *CreateUserRequst) (*UserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedAuthUsersServiceServer) AuthUser(context.Context, *AuthUserRequest) (*UserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthUser not implemented")
}
func (UnimplementedAuthUsersServiceServer) GetUser(context.Context, *GetUserRequest) (*UserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedAuthUsersServiceServer) mustEmbedUnimplementedAuthUsersServiceServer() {}

// UnsafeAuthUsersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthUsersServiceServer will
// result in compilation errors.
type UnsafeAuthUsersServiceServer interface {
	mustEmbedUnimplementedAuthUsersServiceServer()
}

func RegisterAuthUsersServiceServer(s grpc.ServiceRegistrar, srv AuthUsersServiceServer) {
	s.RegisterService(&AuthUsersService_ServiceDesc, srv)
}

func _AuthUsersService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthUsersServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthUsersService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthUsersServiceServer).CreateUser(ctx, req.(*CreateUserRequst))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthUsersService_AuthUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthUsersServiceServer).AuthUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthUsersService_AuthUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthUsersServiceServer).AuthUser(ctx, req.(*AuthUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthUsersService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthUsersServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthUsersService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthUsersServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthUsersService_ServiceDesc is the grpc.ServiceDesc for AuthUsersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthUsersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AuthUsersService",
	HandlerType: (*AuthUsersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _AuthUsersService_CreateUser_Handler,
		},
		{
			MethodName: "AuthUser",
			Handler:    _AuthUsersService_AuthUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _AuthUsersService_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/auth_service.proto",
}
