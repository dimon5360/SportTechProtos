// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: proto/profile_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProfileUsersService_CreateProfile_FullMethodName = "/proto.ProfileUsersService/CreateProfile"
	ProfileUsersService_GetProfile_FullMethodName    = "/proto.ProfileUsersService/GetProfile"
)

// ProfileUsersServiceClient is the client API for ProfileUsersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProfileUsersServiceClient interface {
	CreateProfile(ctx context.Context, in *CreateProfileRequst, opts ...grpc.CallOption) (*UserProfileResponse, error)
	GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*UserProfileResponse, error)
}

type profileUsersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProfileUsersServiceClient(cc grpc.ClientConnInterface) ProfileUsersServiceClient {
	return &profileUsersServiceClient{cc}
}

func (c *profileUsersServiceClient) CreateProfile(ctx context.Context, in *CreateProfileRequst, opts ...grpc.CallOption) (*UserProfileResponse, error) {
	out := new(UserProfileResponse)
	err := c.cc.Invoke(ctx, ProfileUsersService_CreateProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileUsersServiceClient) GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*UserProfileResponse, error) {
	out := new(UserProfileResponse)
	err := c.cc.Invoke(ctx, ProfileUsersService_GetProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfileUsersServiceServer is the server API for ProfileUsersService service.
// All implementations must embed UnimplementedProfileUsersServiceServer
// for forward compatibility
type ProfileUsersServiceServer interface {
	CreateProfile(context.Context, *CreateProfileRequst) (*UserProfileResponse, error)
	GetProfile(context.Context, *GetProfileRequest) (*UserProfileResponse, error)
	mustEmbedUnimplementedProfileUsersServiceServer()
}

// UnimplementedProfileUsersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProfileUsersServiceServer struct {
}

func (UnimplementedProfileUsersServiceServer) CreateProfile(context.Context, *CreateProfileRequst) (*UserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProfile not implemented")
}
func (UnimplementedProfileUsersServiceServer) GetProfile(context.Context, *GetProfileRequest) (*UserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedProfileUsersServiceServer) mustEmbedUnimplementedProfileUsersServiceServer() {}

// UnsafeProfileUsersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProfileUsersServiceServer will
// result in compilation errors.
type UnsafeProfileUsersServiceServer interface {
	mustEmbedUnimplementedProfileUsersServiceServer()
}

func RegisterProfileUsersServiceServer(s grpc.ServiceRegistrar, srv ProfileUsersServiceServer) {
	s.RegisterService(&ProfileUsersService_ServiceDesc, srv)
}

func _ProfileUsersService_CreateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProfileRequst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileUsersServiceServer).CreateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileUsersService_CreateProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileUsersServiceServer).CreateProfile(ctx, req.(*CreateProfileRequst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileUsersService_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileUsersServiceServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileUsersService_GetProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileUsersServiceServer).GetProfile(ctx, req.(*GetProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProfileUsersService_ServiceDesc is the grpc.ServiceDesc for ProfileUsersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProfileUsersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ProfileUsersService",
	HandlerType: (*ProfileUsersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProfile",
			Handler:    _ProfileUsersService_CreateProfile_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _ProfileUsersService_GetProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/profile_service.proto",
}
